// ##### Global Mixins ##### //

// Abstract Bootstrap's responsive breakpoints for use in custom Sass.

@mixin bp($point) {

  @if $point == screen3 {
    @media (min-width: $screen-lg-min) { @content; }

  } @else if $point == screen2 {
    @media (min-width: $screen-md-min) { @content; }

  } @else if $point == screen1 {
    @media (min-width: $screen-sm-min) { @content; }
  }

}

/*

Selector pattern using above mixin:

.selector {
  property: $value;

  @include bp(screen1) {
    property: $value;
  }

  @include bp(screen2) {
    property: $value;
  }

  @include bp(screen3) {
    property: $value;
  }

}

*/

// Pull component/object container over responsive body margins to small screen margin. Reset content to mirror responsive body margins. Typically used for top/bottom borders, like select object:

%pull-borders {

  @include bp(screen1) {
    margin: 0 -10px;
    padding: 0 10px;
  }

  @include bp(screen2) {
    margin: 0 -20px;
    padding: 0 20px;
  }

}

// Pull component/object container over responsive body margins to viewport edge. Reset content to mirror responsive body margins. Typically used for bleeding background to page edge:

%pull-background {
  margin: 0 -10px;
  padding: 0 10px;

  @include bp(screen1) {
    margin: 0 -20px;
    padding: 0 20px;
  }

  @include bp(screen2) {
    margin: 0 -30px;
    padding: 0 30px;
  }

}

// Pull component/object container over responsive body margins to viewport edge. Don't add padding. Typically used for bleeding components to page edge, like on home theme:

%pull-full-bleed {
  margin: 0 -10px;

  @include bp(screen1) {
    margin: 0 -20px;
  }

  @include bp(screen2) {
    margin: 0 -30px;
  }

}

// ***** Old Mixins - but still being used until migrated to new ones above ***** //

// Component/object spacing at left & right viewport edges after body spacing

%viewport-edge-padding { // used in header.scss, etc.

  @include bp(screen1) {
    padding: 0 $spacing-md;
  }

  @include bp(screen2) {
    padding: 0 $spacing-lg;
  }

}

%viewport-edge-margin {

  @include bp(screen1) {
    margin-left: $spacing-md;
    margin-right: $spacing-md;
  }

  @include bp(screen2) {
    margin-left: $spacing-lg;
    margin-right: $spacing-lg;
  }

}

%viewport-edge-padding-with-bleed {
  margin-left: (-$spacing-body);
  margin-right: (-$spacing-body);
  padding-left: $spacing-body;
  padding-right: $spacing-body;

  @include bp(screen1) {
    padding-left: $spacing-body + $spacing-md;
    padding-right: $spacing-body + $spacing-md;
  }

  @include bp(screen2) {
    padding-left: $spacing-body + $spacing-lg;
    padding-right: $spacing-body + $spacing-lg;
  }

}

%right-padding {

  @include bp(screen2) {
    padding-right: 200px;
  }

}

// Bleed component/object to edge of viewport past body spacing

%page-bleed {
  margin: 0 (-$spacing-body);
  padding: 0 $spacing-body;
}

// Hide/show something visually but not for screen readers

%hide {
  position: absolute;
  left: -9999px;
}

%show {
  position: static;
  left: auto;
}

// Set form field focus styles

%fcontrol-focus:focus {
  border-width: 2px;
  border-color: $design-orange-color;
  outline: 0;

  &::placeholder {
    opacity: 0.5;
  }

}
